<UserControl
    x:Class="MayazucMediaPlayer.Controls.FileManagementControl"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mcConrols="using:MayazucMediaPlayer.Controls"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d"
    d:DesignHeight="300"
    d:DesignWidth="400"
    Background="Blue"
    x:Name="RootPage">
    <UserControl.Resources>
        <DataTemplate x:Key="MusicItemDataTemplate">
            <Grid Margin="2" BorderBrush="DarkGray" BorderThickness="0, 0, 0, 1">
                <Grid.Resources>
                    <MenuFlyout x:Key="ItemMenuFlyout">
                        <MenuFlyoutItem Command="{Binding ElementName=RootPage, Path = DataContext.PlayFileCommand}" CommandParameter="{Binding}" Text="Play"/>
                        <MenuFlyoutItem Command="{Binding ElementName=RootPage, Path = DataContext.EnqueueFileCommand}" CommandParameter="{Binding}" Text="Add to now playing"/>
                        <MenuFlyoutItem Command="{Binding ElementName=RootPage, Path = DataContext.PlayNextSingleFileCommand}" CommandParameter="{Binding}" Text="Play next"/>
                        <MenuFlyoutItem Command="{Binding ElementName=RootPage, Path = DataContext.PlayStartingFromFileCommand}" CommandParameter="{Binding}" Text="Play list starting here"/>

                        <MenuFlyoutSeparator></MenuFlyoutSeparator>
                        <MenuFlyoutItem Command="{Binding ElementName=RootPage, Path = DataContext.AddFileToPlaylistCommand}" CommandParameter="{Binding}" Text="Add to playlist"/>
                        <MenuFlyoutSeparator></MenuFlyoutSeparator>
                        <MenuFlyoutItem Command="{Binding ElementName=RootPage, Path = DataContext.RemoveSlidedItem}" CommandParameter="{Binding}" Text="Remove"/>
                        <MenuFlyoutSeparator></MenuFlyoutSeparator>
                        <MenuFlyoutItem Command="{Binding ElementName=RootPage, Path = DataContext.GoToPropertiesCommand}" CommandParameter="{Binding}" Text="Properties"/>
                        <MenuFlyoutSeparator></MenuFlyoutSeparator>
                        <MenuFlyoutSubItem Text="Copy">
                            <MenuFlyoutSubItem Text="File to">
                                <MenuFlyoutItem Text="Folder.."  Command="{Binding ElementName=RootPage, Path = DataContext.CopyFileToFolder}" CommandParameter="{Binding}" ></MenuFlyoutItem>
                                <MenuFlyoutItem Text="Clipboard" Command="{Binding ElementName=RootPage, Path = DataContext.CopyFileToClipboard}" CommandParameter="{Binding}" ></MenuFlyoutItem>
                            </MenuFlyoutSubItem>
                            <MenuFlyoutSeparator></MenuFlyoutSeparator>
                            <MenuFlyoutItem Text="File path" Command="{Binding ElementName=RootPage, Path = DataContext.CopyFilePath}" CommandParameter="{Binding}" />
                            <MenuFlyoutItem Text="File name" Command="{Binding ElementName=RootPage, Path = DataContext.CopyFileName}" CommandParameter="{Binding}" />
                            <MenuFlyoutItem Text="Album name"  Command="{Binding ElementName=RootPage, Path = DataContext.CopyAlbum}" CommandParameter="{Binding}"/>
                            <MenuFlyoutItem Text="Artist name"  Command="{Binding ElementName=RootPage, Path = DataContext.CopyArtist}" CommandParameter="{Binding}"/>
                            <MenuFlyoutItem Text="Genre name"  Command="{Binding ElementName=RootPage, Path = DataContext.CopyGenre}" CommandParameter="{Binding}"/>
                        </MenuFlyoutSubItem>
                    </MenuFlyout>
                </Grid.Resources>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"></RowDefinition>
                    <RowDefinition Height="Auto"></RowDefinition>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"></ColumnDefinition>
                    <ColumnDefinition Width="2*"></ColumnDefinition>
                    <ColumnDefinition Width="8"></ColumnDefinition>
                    <ColumnDefinition Width="*" MaxWidth="250"></ColumnDefinition>
                    <ColumnDefinition Width="8"></ColumnDefinition>
                    <ColumnDefinition Width="*" MaxWidth="325"></ColumnDefinition>
                    <ColumnDefinition Width="8"></ColumnDefinition>
                    <ColumnDefinition Width="*" MaxWidth="175"></ColumnDefinition>
                    <ColumnDefinition Width="Auto"></ColumnDefinition>
                </Grid.ColumnDefinitions>
                <Grid Width="32" Height="32" Grid.Row="0" VerticalAlignment="Stretch">
                    <Grid.Background>
                        <SolidColorBrush Color="{Binding ElementName=tbFileName, Path=Text, Converter={StaticResource colorConverter}}"/>
                    </Grid.Background>
                    <Image Width="32" Height="32" Source="{Binding ImageUri}"></Image>
                </Grid>
                <StackPanel HorizontalAlignment="Left" Margin="3, 3, 2, 3" Grid.Column="1">
                    <TextBlock Text="{Binding DisplayName}" x:Name="tbFileName" Style="{ThemeResource BodyStrongTextBlockStyle}" />
                </StackPanel>
                <Grid Grid.Column="3">
                    <TextBlock  ToolTipService.ToolTip="Artists" Style="{ThemeResource BodyTextBlockStyle}" TextWrapping="Wrap" Visibility="{Binding Metadata.Artist, Converter={StaticResource VisibilityNullConverter}}" Text="{Binding Metadata.Artist}"/>
                </Grid>
                <Grid Grid.Column="5">
                    <TextBlock  ToolTipService.ToolTip="Album" Style="{ThemeResource BodyTextBlockStyle}" TextWrapping="Wrap" Visibility="{Binding Metadata.Album, Converter={StaticResource VisibilityNullConverter}}" Text="{Binding Metadata.Album}"/>
                </Grid>
                <Grid Grid.Column="7">
                    <TextBlock ToolTipService.ToolTip="Genres" Style="{ThemeResource BodyTextBlockStyle}" TextWrapping="Wrap"  Visibility="{Binding Metadata.Genre, Converter={StaticResource VisibilityNullConverter}}" Text="{Binding Metadata.Genre}"/>
                </Grid>
                <TextBlock Text="{Binding Path}" Style="{ThemeResource BodyTextBlockStyle}" Grid.Row="1" Grid.ColumnSpan="7" Grid.Column="0" Margin="0, 4, 0, 2" />

                <Button Flyout="{StaticResource ItemMenuFlyout}" Background="Transparent" BorderBrush="Transparent" Grid.Row="0" Grid.Column="8" Grid.RowSpan="2">
                    <Button.Content>
                        <SymbolIcon Symbol="More"></SymbolIcon>
                    </Button.Content>
                </Button>
            </Grid>
        </DataTemplate>

        <DataTemplate x:Key="VideoPlaylistItemDataTemplate">
            <Grid Margin="2"  BorderBrush="DarkGray" BorderThickness="0, 0, 0, 1">
                <Grid.Resources>
                    <MenuFlyout x:Key="ItemMenuFlyout">
                        <MenuFlyoutItem Command="{Binding ElementName=RootPage, Path = DataContext.PlayFileCommand}" CommandParameter="{Binding}" Text="Play"/>
                        <MenuFlyoutItem Command="{Binding ElementName=RootPage, Path = DataContext.EnqueueFileCommand}" CommandParameter="{Binding}" Text="Add to now playing"/>
                        <MenuFlyoutItem Command="{Binding ElementName=RootPage, Path = DataContext.PlayNextSingleFileCommand}" CommandParameter="{Binding}" Text="Play next"/>
                        <MenuFlyoutSeparator></MenuFlyoutSeparator>
                        <MenuFlyoutItem Command="{Binding ElementName=RootPage, Path = DataContext.AddFileToPlaylistCommand}" CommandParameter="{Binding}" Text="Add to playlist"/>
                        <MenuFlyoutSeparator></MenuFlyoutSeparator>
                        <MenuFlyoutItem Command="{Binding ElementName=RootPage, Path = DataContext.RemoveSlidedItem}" CommandParameter="{Binding}" Text="Remove"/>
                        <MenuFlyoutSeparator></MenuFlyoutSeparator>
                        <MenuFlyoutItem Command="{Binding ElementName=RootPage, Path = DataContext.GoToPropertiesCommand}" CommandParameter="{Binding}" Text="Properties"/>
                        <MenuFlyoutSeparator></MenuFlyoutSeparator>
                        <MenuFlyoutSubItem Text="Copy">
                            <MenuFlyoutSubItem Text="File to">
                                <MenuFlyoutItem Text="Folder.."  Command="{Binding ElementName=RootPage, Path = DataContext.CopyFileToFolder}" CommandParameter="{Binding}" ></MenuFlyoutItem>
                                <MenuFlyoutItem Text="Clipboard" Command="{Binding ElementName=RootPage, Path = DataContext.CopyFileToClipboard}" CommandParameter="{Binding}" ></MenuFlyoutItem>
                            </MenuFlyoutSubItem>
                            <MenuFlyoutSeparator></MenuFlyoutSeparator>
                            <MenuFlyoutItem Text="File path" Command="{Binding ElementName=RootPage, Path = DataContext.CopyFilePath}" CommandParameter="{Binding}" />
                            <MenuFlyoutItem Text="File name" Command="{Binding ElementName=RootPage, Path = DataContext.CopyFileName}" CommandParameter="{Binding}" />
                        </MenuFlyoutSubItem>
                    </MenuFlyout>
                </Grid.Resources>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"></RowDefinition>
                    <RowDefinition Height="Auto"></RowDefinition>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"></ColumnDefinition>
                    <ColumnDefinition Width="2*"></ColumnDefinition>
                    <ColumnDefinition Width="Auto"></ColumnDefinition>
                </Grid.ColumnDefinitions>
                <Grid Width="32" Height="32" Grid.Row="0" VerticalAlignment="Stretch">
                    <Grid.Background>
                        <SolidColorBrush Color="{Binding ElementName=tbFileName, Path=Text, Converter={StaticResource colorConverter}}"/>
                    </Grid.Background>
                    <Image Width="32" Height="32" Source="{Binding ImageUri}"></Image>
                </Grid>
                <StackPanel HorizontalAlignment="Left" Margin="3, 3, 2, 3" Grid.Column="1">
                    <TextBlock Text="{Binding DisplayName}" x:Name="tbFileName" Style="{ThemeResource BodyTextBlockStyle}" />
                </StackPanel>
                <TextBlock Style="{ThemeResource BodyTextBlockStyle}" Text="{Binding Path}" Grid.Row="1" Grid.ColumnSpan="4" Grid.Column="1"  />

                <Button Flyout="{StaticResource ItemMenuFlyout}" Background="Transparent" BorderBrush="Transparent" Grid.Row="0" Grid.Column="2" Grid.RowSpan="2">
                    <Button.Content>
                        <SymbolIcon Symbol="More"></SymbolIcon>
                    </Button.Content>
                </Button>
            </Grid>
        </DataTemplate>

    </UserControl.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition></RowDefinition>
        </Grid.RowDefinitions>
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"></RowDefinition>
                <RowDefinition Height="Auto"></RowDefinition>
            </Grid.RowDefinitions>

            <CommandBar  Visibility="{Binding IsChangingOrder, Converter={StaticResource BooleanToVisibleConverterInstance}, ConverterParameter=true, FallbackValue=Collapsed}" x:Name="ReorderCommandBar" IsEnabled="{Binding Items.Count,  Converter={StaticResource BooleanCountConverter}, ConverterParameter=false, FallbackValue=false}"  Grid.Row="0" HorizontalAlignment="Left"  Background="Transparent" DefaultLabelPosition="Right" >
                <AppBarToggleButton ToolTipService.ToolTip="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Label}"  x:Name="changeItemOrderResetButton"   IsEnabled="{Binding IsReorderButtonEnabled}"  IsChecked="{Binding IsChangingOrder,Mode=TwoWay}" Label="Reorder">
                    <AppBarToggleButton.Icon>
                        <FontIcon Glyph="&#xE1ED;"></FontIcon>
                    </AppBarToggleButton.Icon>
                </AppBarToggleButton>
            </CommandBar>

            <Grid Visibility="{Binding IsChangingOrder, Converter={StaticResource BooleanToVisibleConverterInstance}, ConverterParameter=false}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition></ColumnDefinition>
                    <ColumnDefinition Width="Auto"></ColumnDefinition>
                </Grid.ColumnDefinitions>
                <AppBarToggleButton x:Name="MetadataFilterPanel" Grid.Column="1">
                    <FontIcon FontFamily="{ThemeResource SymbolThemeFontFamily}" Glyph="&#xE16E;" />
                </AppBarToggleButton>
                <CommandBar  x:Name="PrimaryCommandBar" IsEnabled="{Binding Items.Count,  Converter={StaticResource BooleanCountConverter}, ConverterParameter=false, FallbackValue=false}"  Grid.Row="0" HorizontalAlignment="Left"  Background="Transparent" DefaultLabelPosition="Right" >

                    <AppBarButton  ToolTipService.ToolTip="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Label}"  Command="{Binding PlayCommand}" CommandParameter="{Binding}" x:Name="PlayButton" Label="Play all" Icon="Play" IsEnabled="{Binding PlayButtonIsEnabled}" Visibility="{Binding NotSelectingPlayButtonsVisibility}"/>
                    <AppBarButton  ToolTipService.ToolTip="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Label}"  Command="{Binding AddToNowPlayingCommand}" CommandParameter="{Binding}" x:Name="EnqueueButton" Label="Enqueue all" IsEnabled="{Binding EnqueueButtonIsEnabled}" Visibility="{Binding NotSelectingPlayButtonsVisibility}">
                        <AppBarButton.Icon>
                            <FontIcon FontFamily="{ThemeResource SymbolThemeFontFamily}" Glyph="&#xED0E;" />
                        </AppBarButton.Icon>
                    </AppBarButton>

                    <AppBarButton  ToolTipService.ToolTip="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Label}"  Command="{Binding PlayCommand}" CommandParameter="{Binding}" x:Name="PlayButtonSelected" Label="Play selected" Icon="Play" IsEnabled="{Binding PlayButtonIsEnabled}"  Visibility="{Binding SelectingPlayButtonsVisibility, FallbackValue=Collapsed}"/>
                    <AppBarButton  ToolTipService.ToolTip="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Label}"  Command="{Binding AddToNowPlayingCommand}" CommandParameter="{Binding}" x:Name="EnqueueButtonSelected" Label="Enqueue selected" IsEnabled="{Binding EnqueueButtonIsEnabled}" Visibility="{Binding SelectingPlayButtonsVisibility, FallbackValue=Collapsed}">
                        <AppBarButton.Icon>
                            <FontIcon FontFamily="{ThemeResource SymbolThemeFontFamily}" Glyph="&#xED0E;" />
                        </AppBarButton.Icon>
                    </AppBarButton>

                    <AppBarToggleButton  IsChecked="{Binding SelectionMode, Converter={StaticResource selectionModeToBoolean}}"  Command="{Binding EnableSelection}" CommandParameter="{Binding}" ToolTipService.ToolTip="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Label}"   IsEnabled="{Binding Items.Count,  Converter={StaticResource BooleanCountConverter}, ConverterParameter=false}"  Label="Select" x:Name="SelectAllButton" Icon="SelectAll"/>

                    <AppBarButton  Command="{Binding SaveAsPlaylistCommand}" CommandParameter="{Binding}" ToolTipService.ToolTip="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Label}"  IsEnabled="{Binding Items.Count,  Converter={StaticResource BooleanCountConverter}, ConverterParameter=false}"  Label="Save" x:Name="SaveAsPlaylistButton" Icon="Save"/>

                    <AppBarToggleButton ToolTipService.ToolTip="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Label}"  x:Name="changeItemOrder"   IsEnabled="{Binding IsReorderButtonEnabled}"  IsChecked="{Binding IsChangingOrder, Mode=TwoWay}" Label="Reorder">
                        <AppBarToggleButton.Icon>
                            <FontIcon Glyph="&#xE1ED;"></FontIcon>
                        </AppBarToggleButton.Icon>
                    </AppBarToggleButton>


                    <AppBarButton x:Name="ClearButton" CommandParameter="{Binding ElementName=ClearButton}" Command="{Binding ClearAllCommand}"  ToolTipService.ToolTip="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Label}" Label="Remove all" Icon="Clear"   IsEnabled="{Binding Items.Count,  Converter={StaticResource BooleanCountConverter}, ConverterParameter=false}" />

                    <AppBarButton  Command="{Binding AddToExistingPlaylistCommand}"  CommandParameter="{Binding}"  ToolTipService.ToolTip="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Label}"  IsEnabled="{Binding Items.Count,  Converter={StaticResource BooleanCountConverter}, ConverterParameter=false}"  Label="Add to playlist" Icon="Add"/>

                    <CommandBar.SecondaryCommands>
                        <AppBarButton Command="{Binding SelectAllCommandOnlyAudio}" CommandParameter="{Binding}" Label="Select music files"></AppBarButton>
                        <AppBarButton Command="{Binding SelectAllCommandOnlyVideo}" CommandParameter="{Binding}" Label="Select video files"></AppBarButton>
                        <AppBarButton Command="{Binding SelectAllCommandSelected}" CommandParameter="{Binding}" Label="Select all"></AppBarButton>
                        <AppBarButton Command="{Binding UnselectAllCommand}" CommandParameter="{Binding}" Label="Unselect all"></AppBarButton>
                        <AppBarSeparator></AppBarSeparator>
                        <AppBarButton Command="{Binding SaveAsPlaylistCommandOnlyMusic}" Label="Create playlist from music files"></AppBarButton>
                        <AppBarButton Command="{Binding SaveAsPlaylistCommandOnlyVideo}" Label="Create playlist from video files"></AppBarButton>
                        <AppBarButton IsEnabled="False" x:Name="btnSaveAsPlaylistSelected"  Command="{Binding SaveAsPlaylistCommandOnlySelected}" Label="Create only from selected files"></AppBarButton>
                        <AppBarButton Command="{Binding SaveAsPlaylistCommandOnlyunselected}" Label="Create playlist from unselected files"></AppBarButton>
                        <AppBarSeparator></AppBarSeparator>
                        <AppBarButton IsEnabled="False" x:Name="btnRemoveSelected"  Command="{Binding RemoveSelectedCommand}"  CommandParameter="{Binding}" Label="Remove selected"></AppBarButton>
                        <AppBarButton Command="{Binding RemoveOnlyMusicCommand}"  CommandParameter="{Binding}" Label="Remove music files"></AppBarButton>
                        <AppBarButton Command="{Binding RemoveOnlyVideoCommand}"  CommandParameter="{Binding}" Label="Remove video files"></AppBarButton>
                        <AppBarSeparator></AppBarSeparator>
                        <AppBarButton Command="{Binding AddToExistingPlaylistCommandOnlyMusic}" Label="Add music files to playlist"></AppBarButton>
                        <AppBarButton Command="{Binding AddToExistingPlaylistCommandOnlyVideo}" Label="Add video files to playlist"></AppBarButton>
                        <AppBarButton IsEnabled="False" x:Name="btnAddToExistingPlaylist"  Command="{Binding AddToExistingPlaylistCommandOnlySelected}" Label="Add selected files to playlist"></AppBarButton>
                        <AppBarButton Command="{Binding AddToExistingPlaylistCommandOnlyUnselected}" Label="Add unselected files to playlist"></AppBarButton>
                    </CommandBar.SecondaryCommands>
                </CommandBar>
            </Grid>
            <mcConrols:SearchBar  Visibility="{Binding IsChangingOrder, Converter={StaticResource BooleanToVisibleConverterInstance}, ConverterParameter=false}"  Grid.Row="1" x:Name="mcSearchBar" IsEnabled="{Binding CanSearch}" SearchView="{Binding FilterCollectionView}"></mcConrols:SearchBar>
        </Grid>
        <ListView  
                    ItemsSource="{Binding FilterCollectionView}"
                    SelectionMode="{Binding SelectionMode}"  
                    SelectionChanged="SelectionChangedForListView"
                    Grid.Row="1"
                    AllowDrop="True"
                    IsItemClickEnabled="True"
                    ItemClick="PlayFile"
                    ItemTemplateSelector="{Binding ElementName=RootPage, Path=DataTemplateSelectorInstance}"
                    ReorderMode="{Binding ReorderMode}"
                    CanReorderItems="{Binding CanReorderItems}"
                    CanDragItems ="{Binding CanReorderItems}"
                    HorizontalContentAlignment="Left"
                    ShowsScrollingPlaceholders="True"
                    x:Name="COntentPresenter">
            <ListView.Header>
                <ProgressRing x:Name="progressBar" Margin="5" Width="100" Height="100" IsActive="{Binding Path=ShowProgressRing, ElementName=RootPage}" Visibility="Collapsed"/>
            </ListView.Header>

            <ListView.Footer>
                <Grid Visibility="{Binding Path=Items.Count, Converter={StaticResource VisibleWhenZeroConverter}}">
                    <StackPanel>
                        <TextBlock Style="{ThemeResource CaptionTextBlockStyle}" x:Name="tbPlaceholder" Margin="2" TextWrapping="WrapWholeWords"  />
                    </StackPanel>
                </Grid>
            </ListView.Footer>
        </ListView>
    </Grid>

</UserControl>
